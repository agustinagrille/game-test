[gd_scene load_steps=5 format=3 uid="uid://cdxck1hlf6jcf"]

[ext_resource type="PackedScene" uid="uid://sm4b1p3v5m3n" path="res://player.tscn" id="1_qk8dn"]
[ext_resource type="PackedScene" uid="uid://d118o8p2ml424" path="res://mob.tscn" id="2_p8lqx"]

[sub_resource type="CSharpScript" id="CSharpScript_ygpsp"]
script/source = "using Godot;
using System;

public partial class Main : Node
{
	[Export]
	public PackedScene MobScene { get; set; }

	private int _score;
	// Called when the node enters the scene tree for the first time.
	public override void _Ready()
	{
		NewGame();
	}

	// Called every frame. 'delta' is the elapsed time since the previous frame.
	public override void _Process(double delta)
	{
	}


public void GameOver()
{
	GetNode<Timer>(\"MobTimer\").Stop();
	GetNode<Timer>(\"ScoreTimer\").Stop();
}

public void NewGame()
{
	_score = 0;

	var player = GetNode<player>(\"player\");
	var startPosition = GetNode<Marker2D>(\"StartPosition\");
	player.Start(startPosition.Position);

	GetNode<Timer>(\"StartTimer\").Start();
}


private void _on_mob_timer_timeout()
{
	// Note: Normally it is best to use explicit types rather than the `var`
	// keyword. However, var is acceptable to use here because the types are
	// obviously Mob and PathFollow2D, since they appear later on the line.

	// Create a new instance of the Mob scene.
	mob mob = MobScene.Instantiate<mob>();

	// Choose a random location on Path2D.
	var mobSpawnLocation = GetNode<PathFollow2D>(\"MobPath/MobSpawnLocation\");
	mobSpawnLocation.ProgressRatio = GD.Randf();

	// Set the mob's direction perpendicular to the path direction.
	float direction = mobSpawnLocation.Rotation + Mathf.Pi / 2;

	// Set the mob's position to a random location.
	mob.Position = mobSpawnLocation.Position;

	// Add some randomness to the direction.
	direction += (float)GD.RandRange(-Mathf.Pi / 4, Mathf.Pi / 4);
	mob.Rotation = direction;

	// Choose the velocity.
	var velocity = new Vector2((float)GD.RandRange(150.0, 250.0), 0);
	mob.LinearVelocity = velocity.Rotated(direction);

	// Spawn the mob by adding it to the Main scene.
	AddChild(mob);
}


private void _on_start_timer_timeout()
{
	GetNode<Timer>(\"MobTimer\").Start();
	GetNode<Timer>(\"ScoreTimer\").Start();
}


private void _on_score_timer_timeout()
{
	_score++;
}
}
"

[sub_resource type="Curve2D" id="Curve2D_h27ve"]
_data = {
"points": PackedVector2Array(0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 463, 15, 0, 0, 0, 0, 453, 704, 0, 0, 0, 0, 23, 699, 0, 0, 0, 0, 9, 8)
}
point_count = 5

[node name="Main" type="Node"]
script = SubResource("CSharpScript_ygpsp")
MobScene = ExtResource("2_p8lqx")

[node name="Player" parent="." instance=ExtResource("1_qk8dn")]

[node name="MobTimer" type="Timer" parent="."]
wait_time = 0.5

[node name="StartTimer" type="Timer" parent="."]
wait_time = 2.0
one_shot = true

[node name="ScoreTimer" type="Timer" parent="."]

[node name="StartPosition" type="Marker2D" parent="."]
position = Vector2(314, 532)

[node name="MobPath" type="Path2D" parent="."]
curve = SubResource("Curve2D_h27ve")

[node name="MobSpawnLocation" type="PathFollow2D" parent="MobPath"]
position = Vector2(9, 8)
rotation = 0.0154173

[connection signal="Hit" from="Player" to="." method="game_over"]
[connection signal="timeout" from="MobTimer" to="." method="_on_mob_timer_timeout"]
[connection signal="timeout" from="StartTimer" to="." method="_on_start_timer_timeout"]
[connection signal="timeout" from="ScoreTimer" to="." method="_on_score_timer_timeout"]
