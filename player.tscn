[gd_scene load_steps=8 format=3 uid="uid://sm4b1p3v5m3n"]

[ext_resource type="Texture2D" uid="uid://bol4cgcgyvc78" path="res://art/playerGrey_up1.png" id="1_bnd0f"]
[ext_resource type="Texture2D" uid="uid://cywakarlsrqgu" path="res://art/playerGrey_up2.png" id="2_r10is"]
[ext_resource type="Texture2D" uid="uid://bbn5x8avu3guf" path="res://art/playerGrey_walk1.png" id="3_kynmm"]
[ext_resource type="Texture2D" uid="uid://bspdt2wr2ttn4" path="res://art/playerGrey_walk2.png" id="4_pscxk"]

[sub_resource type="CSharpScript" id="CSharpScript_03s0s"]
script/source = "using Godot;
using System;

public partial class Player : Area2D
{
	[Signal]
	public delegate void HitEventHandler();
	
	 [Export]
	public int Speed { get; set; } = 400; // How fast the player will move (pixels/sec).

	public Vector2 ScreenSize; // Size of the game window.
	// Called when the node enters the scene tree for the first time.
	public override void _Ready()
	{
		ScreenSize = GetViewportRect().Size;
	}

	// Called every frame. 'delta' is the elapsed time since the previous frame.
	public override void _Process(double delta)
	{
		var velocity = Vector2.Zero; // The player's movement vector.

	if (Input.IsActionPressed(\"move_right\"))
	{
		velocity.X += 1;
	}

	if (Input.IsActionPressed(\"move_left\"))
	{
		velocity.X -= 1;
	}

	if (Input.IsActionPressed(\"move_down\"))
	{
		velocity.Y += 1;
	}

	if (Input.IsActionPressed(\"move_up\"))
	{
		velocity.Y -= 1;
	}

	var animatedSprite2D = GetNode<AnimatedSprite2D>(\"AnimatedSprite2D\");

	if (velocity.Length() > 0)
	{
		velocity = velocity.Normalized() * Speed;
		animatedSprite2D.Play();
	}
	else
	{
		animatedSprite2D.Stop();
	}
	
	Position += velocity * (float)delta;
	Position = new Vector2(
	x: Mathf.Clamp(Position.X, 0, ScreenSize.X),
	y: Mathf.Clamp(Position.Y, 0, ScreenSize.Y)
	);
	
	if (velocity.X != 0)
{
	animatedSprite2D.Animation = \"walk\";
	animatedSprite2D.FlipV = false;
	// See the note below about the following boolean assignment.
	animatedSprite2D.FlipH = velocity.X < 0;
}
else if (velocity.Y != 0)
{
	animatedSprite2D.Animation = \"up\";
	animatedSprite2D.FlipV = velocity.Y > 0;
}
}

private void _on_body_entered(Node2D body)
{
Hide(); // Player disappears after being hit.
	EmitSignal(SignalName.Hit);
	// Must be deferred as we can't change physics properties on a physics callback.
	GetNode<CollisionShape2D>(\"CollisionShape2D\").SetDeferred(CollisionShape2D.PropertyName.Disabled, true);
}


public void Start(Vector2 position)
{
	Position = position;
	Show();
	GetNode<CollisionShape2D>(\"CollisionShape2D\").Disabled = false;
}
}
"

[sub_resource type="SpriteFrames" id="SpriteFrames_uoguj"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_bnd0f")
}, {
"duration": 1.0,
"texture": ExtResource("2_r10is")
}],
"loop": true,
"name": &"up",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("3_kynmm")
}, {
"duration": 1.0,
"texture": ExtResource("4_pscxk")
}],
"loop": true,
"name": &"walk",
"speed": 5.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_pkei8"]
radius = 27.0
height = 68.0

[node name="Player" type="Area2D"]
position = Vector2(74, 82)
script = SubResource("CSharpScript_03s0s")
Speed = null
metadata/_edit_group_ = true

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.5, 0.5)
sprite_frames = SubResource("SpriteFrames_uoguj")
animation = &"up"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CapsuleShape2D_pkei8")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
